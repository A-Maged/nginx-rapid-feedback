Parameters:
  PemKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

Resources:
  PublicEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-0ac80df6eff0e70b5
      InstanceType: t2.micro
      KeyName:
        Ref: PemKey
      SecurityGroups:
        - Ref: PublicSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          apt-get update && \
          apt-get -y install software-properties-common wget && \
          wget -qO - https://openresty.org/package/pubkey.gpg | apt-key add - && \
          add-apt-repository -y "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main" && \
          apt-get update -y && \
          apt-get install openresty -y && \
          apt-get install inotify-tools -y && \
          apt-get install -y luarocks && \
          apt-get install vim -y

          luarocks install lua-resty-auto-ssl      

          groupadd www
          usermod -a -G www ubuntu

          mkdir /etc/resty-auto-ssl

          ### generate fallback ssl cert ###
          openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
            -subj '/CN=sni-support-required-for-valid-ssl' \
            -keyout /etc/ssl/resty-auto-ssl-fallback.key \
            -out /etc/ssl/resty-auto-ssl-fallback.crt

          chmod -R 777 /etc/resty-auto-ssl 
          chmod -R 777 /usr/local/openresty
          chmod -R 777 /etc/ssl/

          ### openresty config ###
          mkdir /home/ubuntu/conf/
          touch /home/ubuntu/conf/nginx.conf
          echo '
            # user ec2-user www;
            events {
              worker_connections 1024;
            }

            http {
              lua_shared_dict auto_ssl 1m;
              lua_shared_dict auto_ssl_settings 64k;
              resolver 8.8.8.8 ipv6=off;

              init_by_lua_block {
                auto_ssl = (require "resty.auto-ssl").new()
                auto_ssl:set("allow_domain", function(domain)
                  return true
                end)
                auto_ssl:init()
              }

              init_worker_by_lua_block {
                auto_ssl:init_worker()
              }

              server {
                listen 443 ssl;
                ssl_certificate_by_lua_block {
                  auto_ssl:ssl_certificate()
                }
                ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
                ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

                location / {
                    proxy_pass http://d3fewn2dflazk2.cloudfront.net$request_uri;
                }
              }

              server {
                listen 80;
                location /.well-known/acme-challenge/ {
                  content_by_lua_block {
                    auto_ssl:challenge_server()
                  }
                }

                return 301 https://$host$request_uri;
              }

              server {
                listen 127.0.0.1:8999;
                client_body_buffer_size 128k;
                client_max_body_size 128k;

                location / {
                  content_by_lua_block {
                    auto_ssl:hook_server()
                  }
                }
              }
            }
          ' >> /home/ubuntu/conf/nginx.conf
          
          ### Init openresty ###
          pkill openresty
          pkill nginx
          openresty -c /home/ubuntu/conf/nginx.conf
          
          ### Restart openresty when config file changes ###
          while true; do
              inotifywait -r -e modify,attrib,close_write,move,create,delete /home/ubuntu/conf/nginx.conf
              
              pkill openresty
              pkill nginx
              openresty -c /home/ubuntu/conf/nginx.conf
          done


  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/s & ssh
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0